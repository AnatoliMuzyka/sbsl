
структура ОписаниеБазы
    пер имяИнфоБазы: Строка 
    пер колАктПольз: Число = 0
;

метод ЗапускАрхивации(номерВерсии: Строка, имяБазы: Строка, userБазы: Строка, ПарольБазы: Строка)
    //C:\Program Files\1cv8\bin\1cv8.exe" CONFIG /F D:\УпрТорг /N ИмяПользователя /P Пароль /DumpIB c:\имя.dt
    //номерВерсии d:\1c\8.3.20.1914\bin\
    знч путьКПлатформе = "d:\\1c\\$номерВерсии\\bin\\1cv8.exe"
    знч имяСервера = "server"
    знч путьКБазе = "${имяСервера}\\$имяБазы"
    пер ТекущаяДата = ДатаВремя.Сейчас(новый ЧасовойПояс("UTC+3")).Представление("дд-ММ-гггг'_'ЧЧ-мм")
    знч путьКАрхиву = "e:\\arch\\"
    знч путьКФайлуЛогов = "e:\\arch\\LogArch.log"
    //знч путьКФайлуЛогов = "e:\\arch\\LogArch.log"
    знч пакетнаяКоманда = 
    "$путьКПлатформе CONFIG /DisableStartupMessages /S $путьКБазе /N $userБазы /P $ПарольБазы /DumpIB "
     + "$путьКАрхиву${имяБазы}_${ТекущаяДата}.dt /DumpResult $путьКФайлуЛогов"
    пер Процесс = новый ПроцессОс("cmd.exe", ["/C", пакетнаяКоманда])//"dir c:\\windows /N /4"
    пер Строка: Строка
    Процесс.Запустить()
    пер ПотокЧтения = Процесс.ПолучитьПотокВывода() //ПотокВывода
    пока Истина
         Строка = ПотокЧтения.ПрочитатьКакСтроку("UTF-8")
        если Строка.Пусто()
            прервать
        ;
        Консоль.Записать(Строка)
    ;
;

метод ЗаблокироватьБазу(база: ИнфобазаV8)
    знч минутыБлокировки = 30
    знч моментНачала = Момент.Сейчас()
    знч моментОкончания = ДатаВремя
                                    .Сейчас(ЧасовойПояс{UTC+3})
                                    .ДобавитьМинуты(минутыБлокировки)
                                    .ВМомент(ЧасовойПояс{UTC+3})
    знч предНачало = моментНачала.Представление()
    знч предКонец = моментОкончания.Представление()
    знч СообщениеБлокировки = "Выполняеться архивация базы ${предНачало}-${предКонец}. Войдите в базу позже..."
    база.СообщениеБлокировки = СообщениеБлокировки
    база.БлокировкаРегламентныхЗаданий = Истина
    база.ВремяНачалаБлокировки = моментНачала
    база.ВремяОкончанияБлокировки = моментОкончания 
    база.ВключенаБлокировкаНачалаСеансов = Истина
    
;
метод Скрипт(закрыватьАктивныеСеансы: Булево, номерВерсии: Строка, авторизация: Строка, словаИсключенияДляБаз: Строка = "copy")
    знч подстрАвторизация = авторизация.Разделить(" ", Ложь)
    
    пер Сервер = новый АдминистрированиеСервераV8("localhost", 1545)
    пер СписокКластеров = Сервер.ПолучитьКластеры()
    //знч исключаемыеБазы = ["copy"]
    знч исключаемыеБазы = словаИсключенияДляБаз.Разделить("", Ложь)//["base1cBuh", "base1cZUP", "doc"]//copy

    знч loginClaster: Строка = подстрАвторизация[0]
    знч passwordClaster: Строка = подстрАвторизация[1]
    знч loginBase: Строка = подстрАвторизация[2]
    знч passwordBase: Строка = подстрАвторизация[3]

    для текКластер из СписокКластеров

        пер списокБаз = <Ууид, ОписаниеБазы>{:}

        Консоль.Записать("claster " + текКластер.Имя)
        попытка 
            текКластер.ВыполнитьАутентификацию(loginClaster, passwordClaster)
        поймать Исключение: неизвестно
            выбросить Исключение
        ;
        пер СписокОписанийИБ = текКластер.ПолучитьИнфобазы()
        для текОписаниеИБ из СписокОписанийИБ
            знч имяИБ = текОписаниеИБ.Имя
            пер базуНужноПропустить = Ложь
            для имяИсклБазы из исключаемыеБазы
                если имяИБ.Найти(имяИсклБазы) != -1
                    базуНужноПропустить = Истина
                    break
                ;
            ;
            если базуНужноПропустить
                продолжить
            ;
            Консоль.Записать("base - " + текОписаниеИБ.Имя)
            знч текУИДИнфоБазы = текОписаниеИБ.ИдИнфобазы

            знч текОписИБ = текКластер.ПолучитьИнфобазу(текОписаниеИБ.ИдИнфобазы)
            знч текИБ = текОписИБ.ВыполнитьАутентификацию(loginBase, passwordBase)
            ЗаблокироватьБазу(текИБ)

            //знч текИБ = текКластер.ПолучитьИнфобазу(текУИДИнфоБазы)
            списокБаз.Вставить(текУИДИнфоБазы, новый ОписаниеБазы(текОписаниеИБ.Имя, 0))
        ;

        знч сеансы = текКластер.ПолучитьСеансы()
        для сеанс из сеансы
            знч текОписИБ = текКластер.ПолучитьИнфобазу(сеанс.ИдИнфобазы)
            если не списокБаз.СодержитКлюч(сеанс.ИдИнфобазы)
                продолжить
            ;
        //         знч текОписИБ = текКластер.ПолучитьИнфобазу(ЭлементБазы.Ключ)
            знч текИБ = текОписИБ.ВыполнитьАутентификацию(loginBase, passwordBase)

//            ЗаблокироватьБазу(текИБ)

            знч времяНачалаСеанса = сеанс.ВремяНачала.ВДатаВремя(новый ЧасовойПояс("UTC+3"))
            знч времяПослАктивности = сеанс.ВремяПоследнейАктивности.ВДатаВремя(новый ЧасовойПояс("UTC+3"))
            знч сообщение = "# ${сеанс.НомерСеанса} app - ${сеанс.ИмяПриложения} база - ${текОписИБ.Имя} user - ${сеанс.ИмяПользователя} время нач/посл. - ${времяНачалаСеанса}/${времяПослАктивности} sleep - ${сеанс.СпящийСеанс}"
            если сеанс.СпящийСеанс 
                или закрыватьАктивныеСеансы 
                или сеанс.ИмяПриложения == "BackgroundJob"
                или сеанс.ИмяПриложения == "SrvrConsole"
                или сеанс.ИмяПриложения == "RAS"
                попытка 
                    сеанс.ЗавершитьСеанс()   
                    Консоль.Записать("сеанс ЗАВЕРШЕН " + сообщение )
                поймать Исключение: неизвестно
                    Консоль.Записать("ошибка закрытия сеанса " + сеанс.НомерСеанса )
                    выбросить Исключение
                ;
            иначе
                Консоль.Записать(сообщение)
            ;
            пер элСпискаБаз = списокБаз.Получить(сеанс.ИдИнфобазы)
            элСпискаБаз.колАктПольз += 1
            списокБаз.Вставить(сеанс.ИдИнфобазы, элСпискаБаз)

            Консоль.Записать("base - ${текИБ.Имя} - Начата архивация")
            ЗапускАрхивации(номерВерсии, текОписИБ.Имя, loginBase, passwordBase)
            попытка 
                текИБ.БлокировкаРегламентныхЗаданий = Ложь
                текИБ.ВключенаБлокировкаНачалаСеансов = Ложь
                текИБ.СообщениеБлокировки = ""
                Консоль.Записать("base - ${текИБ.Имя} - снята блок.регл.заданий")
            поймать Исключение: неизвестно
                Консоль.Записать("Ошибка: ${Исключение}")
            ;

        ;
        // для ЭлементБазы из списокБаз
        //     знч элБазы = ЭлементБазы.Значение
        //     Консоль.Записать("base - ${элБазы.имяИнфоБазы} users - ${элБазы.колАктПольз}")
        //     если элБазы.колАктПольз == 0
        //         знч текОписИБ = текКластер.ПолучитьИнфобазу(ЭлементБазы.Ключ)
        //         знч текИБ = текОписИБ.ВыполнитьАутентификацию(loginBase, passwordBase)
        //         попытка 
        //             текИБ.СообщениеБлокировки = СообщениеБлокировки
        //             текИБ.БлокировкаРегламентныхЗаданий = Истина
        //             текИБ.ВремяНачалаБлокировки = Момент.Сейчас()
        //             текИБ.ВремяОкончанияБлокировки = ДатаВремя
        //                                             .Сейчас(ЧасовойПояс{UTC+3})
        //                                             .ДобавитьМинуты(минутыБлокировки)
        //                                             .ВМомент(ЧасовойПояс{UTC+3})
        //             текИБ.ВключенаБлокировкаНачалаСеансов = Истина
        //             ЗапускАрхивации(номерВерсии, элБазы.имяИнфоБазы)
        //             Консоль.Записать("base - ${текИБ.Имя} - забл.регл.задания")

        //         поймать Исключение: неизвестно
        //             Консоль.Записать("Ошибка: ${Исключение}")
        //         ;
        //         попытка 
        //             текИБ.БлокировкаРегламентныхЗаданий = Ложь
        //             текИБ.ВключенаБлокировкаНачалаСеансов = Ложь
        //             Консоль.Записать("base - ${текИБ.Имя} - снята блок.регл.заданий")
        //         поймать Исключение: неизвестно
        //             Консоль.Записать("Ошибка: ${Исключение}")
        //         ;
        //         текИБ.БлокировкаРегламентныхЗаданий = Истина
        //     ;
        // ;
    ;
;



структура ОписаниеБазы
    пер имяИнфоБазы: Строка 
    пер база: ИнфобазаV8
;

метод ЗапускАрхивации(номерВерсии: Строка,
                    имяБазы: Строка,
                    userБазы: Строка,
                    ПарольБазы: Строка,
                    путьКАрхиву: Строка)

    знч путьКПлатформе = "d:\\1c\\$номерВерсии\\bin\\1cv8.exe"
    знч имяСервера = "server"
    знч путьКБазе = "${имяСервера}\\$имяБазы"
    пер ТекущаяДата = ДатаВремя.Сейчас(новый ЧасовойПояс("UTC+3")).Представление("дд-ММ-гггг'_'ЧЧ-мм")
    знч путьКФайлуЛогов = "${путьКАрхиву}LogArch.log"
    знч пакетнаяКоманда = 
    "$путьКПлатформе CONFIG /DisableStartupMessages /S $путьКБазе /N $userБазы /P $ПарольБазы /DumpIB "
     + "${путьКАрхиву}arch1c_${имяБазы}_${ТекущаяДата}.dt /DumpResult $путьКФайлуЛогов"
    пер Процесс = новый ПроцессОс("cmd.exe", ["/C", пакетнаяКоманда])
    пер Строка: Строка
    Процесс.Запустить()
    пер ПотокЧтения = Процесс.ПолучитьПотокВывода() //ПотокВывода
    пока Истина
         Строка = ПотокЧтения.ПрочитатьКакСтроку("UTF-8")
        если Строка.Пусто()
            прервать
        ;
        Консоль.Записать(Строка)
    ;
;

метод ЗаблокироватьБазу(база: ИнфобазаV8)
    знч минутыБлокировки = 30
    знч моментНачала = Момент.Сейчас()
    знч моментОкончания = ДатаВремя
                                    .Сейчас(ЧасовойПояс{UTC+3})
                                    .ДобавитьМинуты(минутыБлокировки)
                                    .ВМомент(ЧасовойПояс{UTC+3})
    знч предНачало = моментНачала.Представление()
    знч предКонец = моментОкончания.Представление()
    знч СообщениеБлокировки = "Выполняеться архивация базы ${предНачало}-${предКонец}. Войдите в базу после $предКонец"
//    база.СообщениеБлокировки = СообщениеБлокировки
    база.БлокировкаРегламентныхЗаданий = Истина
//    база.ВремяНачалаБлокировки = моментНачала
//    база.ВремяОкончанияБлокировки = моментОкончания 
//    база.ВключенаБлокировкаНачалаСеансов = Истина
    база.Write()
    
;
метод КопироватьАрхивы(путьЛокальномуАрхиву: Строка, путьУдаленныйАрхив: Строка)
    пер настройкаПоискаФайлов: НастройкиПоиска
    пер ТекущаяДата = ДатаВремя.Сейчас(новый ЧасовойПояс("UTC+3")).Представление("дд-ММ-гггг")

    знч путьКудаКопировать = путьУдаленныйАрхив
    
    настройкаПоискаФайлов = новый НастройкиПоиска()
                            .МаксимальнаяГлубина(1)
                            .ИмяСодержит("arch1c_")
                            .ИмяСодержит("%ТекущаяДата")
                            .ИсключитьКаталоги(Истина)
    знч найденныеАрхивы = Файлы.Найти(путьЛокальномуАрхиву, настройкаПоискаФайлов)
    знч настройкиКопирования = новый НастройкиКопирования()
                            .КопироватьАтрибуты(Истина)
                            .ПропускатьДочерние(Истина)
                            .ПропускатьСуществующие(Истина)
    для архив из найденныеАрхивы
        попытка 
            знч новыйФайлИПуть = путьКудаКопировать + архив.Имя
            Файлы.Скопировать(архив, новыйФайлИПуть, настройкиКопирования)
            Консоль.Записать("copy file from ${архив.Путь} to ${новыйФайлИПуть}")  
        поймать Исключение: неизвестно
            Консоль.Записать(Исключение)
        ;
        
    ;
;
метод Скрипт(закрыватьАктивныеСеансы: Булево,
            номерВерсии: Строка, // номер версии платформу (например, 8.3.20.1914)
            авторизация: Строка, // <логин кластер> <пароль кластер> <логин база> <пароль база>
            словаИсключенияДляБаз: Строка = "copy",//перечисляем через пробел базы для исключения или слова из названия баз (например, copy)
            путьКАрхиву: Строка,
            путьКУдаленномуАрхиву: Строка) 
    знч подстрАвторизация = авторизация.Разделить(" ", Ложь)
    
    пер Сервер = новый АдминистрированиеСервераV8("localhost", 1545)
    пер СписокКластеров = Сервер.ПолучитьКластеры()

    знч исключаемыеБазы = словаИсключенияДляБаз.Разделить(" ", Ложь)

    знч loginClaster: Строка = подстрАвторизация[0] //<логин кластер>
    знч passwordClaster: Строка = подстрАвторизация[1] //<пароль кластер>
    знч loginBase: Строка = подстрАвторизация[2] //<логин база>
    знч passwordBase: Строка = подстрАвторизация[3] //<пароль база>

    для текКластер из СписокКластеров

        пер списокБаз = <Ууид, ОписаниеБазы>{:}

        Консоль.Записать("claster " + текКластер.Имя)
        попытка 
            текКластер.ВыполнитьАутентификацию(loginClaster, passwordClaster)
        поймать Исключение: неизвестно
            Консоль.Записать(Исключение)
            продолжить
        ;
        пер СписокОписанийИБ = текКластер.ПолучитьИнфобазы()
        для текОписаниеИБ из СписокОписанийИБ
            знч имяИБ = текОписаниеИБ.Имя
            пер базуНужноПропустить = Ложь
            для имяИсклБазы из исключаемыеБазы
                если имяИБ.Найти(имяИсклБазы) != -1
                    базуНужноПропустить = Истина
                    break
                ;
            ;
            если базуНужноПропустить
                продолжить
            ;
            Консоль.Записать("В базе ${текОписаниеИБ.Имя} заблок. регл. задания")
            знч текУИДИнфоБазы = текОписаниеИБ.ИдИнфобазы

            знч текОписИБ = текКластер.ПолучитьИнфобазу(текОписаниеИБ.ИдИнфобазы)
            пер текИБ: неизвестно
            попытка
                текИБ = текОписИБ.ВыполнитьАутентификацию(loginBase, passwordBase)
            поймать Исключение: неизвестно
                Консоль.Записать(Исключение)
                продолжить               
            ;
            ЗаблокироватьБазу(текИБ)

            //знч текИБ = текКластер.ПолучитьИнфобазу(текУИДИнфоБазы)
            списокБаз.Вставить(текУИДИнфоБазы, новый ОписаниеБазы(текОписаниеИБ.Имя, текИБ))
        ;

        знч сеансы = текКластер.ПолучитьСеансы()
        для сеанс из сеансы
            знч текОписИБ = текКластер.ПолучитьИнфобазу(сеанс.ИдИнфобазы)
            если не списокБаз.СодержитКлюч(сеанс.ИдИнфобазы)
                продолжить
            ;
            //знч текИБ = текОписИБ.ВыполнитьАутентификацию(loginBase, passwordBase)

            знч времяНачалаСеанса = сеанс.ВремяНачала.ВДатаВремя(новый ЧасовойПояс("UTC+3"))
            знч времяПослАктивности = сеанс.ВремяПоследнейАктивности.ВДатаВремя(новый ЧасовойПояс("UTC+3"))
            знч сообщение = "# ${сеанс.НомерСеанса} app - ${сеанс.ИмяПриложения} база - ${текОписИБ.Имя} user - ${сеанс.ИмяПользователя} время нач/посл. - ${времяНачалаСеанса}/${времяПослАктивности} sleep - ${сеанс.СпящийСеанс}"
            если сеанс.СпящийСеанс 
                или закрыватьАктивныеСеансы 
                или сеанс.ИмяПриложения == "BackgroundJob"
                или сеанс.ИмяПриложения == "SrvrConsole"
                или сеанс.ИмяПриложения == "RAS"
                попытка 
                    сеанс.ЗавершитьСеанс()   
                    Консоль.Записать("сеанс ЗАВЕРШЕН " + сообщение )
                поймать Исключение: неизвестно
                    Консоль.Записать("ошибка закрытия сеанса " + Исключение.ToString() )
                    продолжить
                    //выбросить Исключение
                ;
            иначе
                Консоль.Записать(сообщение)
            ;
            //пер элСпискаБаз = списокБаз.Получить(сеанс.ИдИнфобазы)
            //элСпискаБаз.колАктПольз += 1
            //списокБаз.Вставить(сеанс.ИдИнфобазы, элСпискаБаз)


        ;
        для описание из списокБаз
            знч текИБ = описание.Value.база
            знч времяНачала = ДатаВремя.Now()
            Консоль.Записать("${текИБ.Имя} - Начата архивация $времяНачала")
            ЗапускАрхивации(номерВерсии, текИБ.Имя, loginBase, passwordBase, путьКАрхиву)
            попытка 
                текИБ.БлокировкаРегламентныхЗаданий = Ложь
                текИБ.ВключенаБлокировкаНачалаСеансов = Ложь
                текИБ.СообщениеБлокировки = ""
                текИБ.Write()
                знч сеансыТекБазы = текИБ.ПолучитьСеансы()
                для сеансТекБазы из сеансыТекБазы
                   сеансТекБазы.ЗавершитьСеанс() 
                ;
                знч времяОкончания = ДатаВремя.Now()
                знч длительностьАрхивации = времяОкончания - времяНачала
                Консоль.Записать("${текИБ.Имя} - Конец архивации $времяОкончания (длилась: ${длительностьАрхивации.Presentation()})")
            поймать Исключение: неизвестно
                Консоль.Записать("Ошибка: ${Исключение}")
            ;
        ;
    ;
    КопироватьАрхивы(путьКАрхиву, путьКУдаленномуАрхиву)
;


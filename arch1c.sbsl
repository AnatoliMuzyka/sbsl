
структура ОписаниеБазы
    пер имяИнфоБазы: Строка 
    пер база: ИнфобазаV8
;

метод ЗапускАрхивации(номерВерсии: Строка,
                    имяБазы: Строка,
                    userБазы: Строка,
                    ПарольБазы: Строка,
                    путьКАрхиву: Строка)

    знч путьКПлатформе = "d:\\1c\\$номерВерсии\\bin\\1cv8.exe"
    знч имяСервера = "server"
    знч путьКБазе = "${имяСервера}\\$имяБазы"
    пер ТекущаяДата = ДатаВремя.Сейчас(новый ЧасовойПояс("UTC+3")).Представление("дд-ММ-гггг'_'ЧЧ-мм")
    знч путьКФайлуЛогов = "${путьКАрхиву}LogArch.log"
    знч пакетнаяКоманда = 
    "$путьКПлатформе CONFIG /DisableStartupMessages /S $путьКБазе /N $userБазы /P $ПарольБазы /DumpIB "
     + "${путьКАрхиву}arch1c_${имяБазы}_${ТекущаяДата}.dt /DumpResult $путьКФайлуЛогов"
    пер Процесс = новый ПроцессОс("cmd.exe", ["/C", пакетнаяКоманда])
    пер Строка: Строка
    Процесс.Запустить()
    пер ПотокЧтения = Процесс.ПолучитьПотокВывода() //ПотокВывода
    пока Истина
         Строка = ПотокЧтения.ПрочитатьКакСтроку("UTF-8")
        если Строка.Пусто()
            прервать
        ;
        Консоль.Записать(Строка)
    ;
;

метод ЗаблокироватьБазу(база: ИнфобазаV8)
    знч минутыБлокировки = 30
    знч моментНачала = Момент.Сейчас()
    знч моментОкончания = ДатаВремя
                                    .Сейчас(ЧасовойПояс{UTC+3})
                                    .ДобавитьМинуты(минутыБлокировки)
                                    .ВМомент(ЧасовойПояс{UTC+3})
    знч предНачало = моментНачала.Представление()
    знч предКонец = моментОкончания.Представление()
    знч СообщениеБлокировки = "Выполняеться архивация базы ${предНачало}-${предКонец}. Войдите в базу после $предКонец"
//    база.СообщениеБлокировки = СообщениеБлокировки
    база.БлокировкаРегламентныхЗаданий = Истина
//    база.ВремяНачалаБлокировки = моментНачала
//    база.ВремяОкончанияБлокировки = моментОкончания 
//    база.ВключенаБлокировкаНачалаСеансов = Истина
    база.Write()
    
;

метод КопироватьАрхивы(путьЛокальномуАрхиву: Строка, путьУдаленныйАрхив: Строка)
    пер настройкаПоискаФайлов: НастройкиПоиска
    пер ТекущаяДата = ДатаВремя.Сейчас(новый ЧасовойПояс("UTC+3")).Представление("дд-ММ-гггг")

    знч путьКудаКопировать = путьУдаленныйАрхив
    
    настройкаПоискаФайлов = новый НастройкиПоиска()
                            .МаксимальнаяГлубина(1)
                            .ИмяСодержит("arch1c_")
                            .ИмяСодержит("%ТекущаяДата")
                            .ИсключитьКаталоги(Истина)
    знч найденныеАрхивы = Файлы.Найти(путьЛокальномуАрхиву, настройкаПоискаФайлов)
    знч настройкиКопирования = новый НастройкиКопирования()
                            .КопироватьАтрибуты(Истина)
                            .ПропускатьДочерние(Истина)
                            .ПропускатьСуществующие(Истина)
    для архив из найденныеАрхивы
        попытка 
            знч новыйФайлИПуть = путьКудаКопировать + архив.Имя
            Файлы.Скопировать(архив, новыйФайлИПуть, настройкиКопирования)
            Консоль.Записать("copy file from ${архив.Путь} to ${новыйФайлИПуть}")  
        поймать Исключение: неизвестно
            Консоль.Записать(Исключение)
        ;
        
    ;
;

метод ЗаписьВJSON(версияПлатформы: Строка, описаниеСообщений: Массив<Соответствие<Строка, Объект?>> = [])
    знч файлLogs = новый Файл(".\\logs\\logProcess1.json")
    исп потокЗаписи = файлLogs.ОткрытьПотокЗаписи()// Истина - Добавлять в файл, иначе перезаписывать
    знч настройкаЗаписиОбъектовJson = новый НастройкиЗаписиОбъектовJson()
    знч описаниеАрхивации = новый Соответствие<Строка, Объект?>()

    знч tags = новый Соответствие<Строка, Объект?>()
    tags.Вставить("ios_version", "4.0")
    tags.Вставить("context", "production")

    знч описаниеОшибки: Соответствие<Строка, Объект?>

    знч exception = новый Соответствие<Строка, Объект?>()

    exception.Вставить("values", описаниеСообщений)

    описаниеАрхивации.Вставить("event_id", новый Ууид())
    описаниеАрхивации.Вставить("timestamp", ДатаВремя.Сейчас(ЧасовойПояс{UTC+0}))
    описаниеАрхивации.Вставить("transaction", "arch1C.exitUsers.blockUsers")
    описаниеАрхивации.Вставить("platform", "other")
    описаниеАрхивации.Вставить("logger", "name loger")
    описаниеАрхивации.Вставить("dist", "baseName")
    описаниеАрхивации.Вставить("level", "error")//warning
    описаниеАрхивации.Вставить("environment", версияПлатформы)
    описаниеАрхивации.Вставить("message", "Архивация 1с Базы")
    описаниеАрхивации.Вставить("tags", tags)
    описаниеАрхивации.Вставить("exception", exception)
    СериализацияJson.ЗаписатьОбъект(потокЗаписи, описаниеАрхивации, настройкаЗаписиОбъектовJson)
    потокЗаписи.Закрыть()
    Консоль.Записать("файл ${файлLogs.Путь.ВСтроку()} записан")
;

метод ОтправитьВSentry() //URLSentry: Строка, path: Строка
    знч URLSentry: Строка = СредаИсполнения.ПолучитьПеременную("SentryURL")
    знч path: Строка = СредаИсполнения.ПолучитьПеременную("SentryPath")
    если URLSentry == ""
        возврат
    ;
    знч запросКSentry = КлиентHttp.WithBaseUrl(URLSentry)
    знч запросPost = запросКSentry.PostRequest(path)
    запросPost.УстановитьТипСодержимого("application/json")
    знч Заголовки = новый ЗаголовкиHttp({"X-Sentry-Auth": "Sentry sentry_version=7,sentry_key=8d7f2e021e38417586ddfb62a8f18221"
                                        })
    запросPost.SetHeaders(Заголовки)
    попытка
        пер файлТелаЗапроса = новый Файл(".\\logs\\logProcess1.json")

        запросPost.SetBody(файлТелаЗапроса)

        пер Ответ = запросPost.Выполнить()
        знч КодСостояния = Ответ.КодСостояния
        знч тело = Ответ.Body.ReadAsString()

        Консоль.Записать(КодСостояния)
        Консоль.Записать(тело)
    поймать Исключение: неизвестно
        Консоль.Записать(Исключение)
    ;
;

метод ОсновнойПроцессАрхивации(закрыватьАктивныеСеансы: Булево,
            номерВерсии: Строка, // номер версии платформу (например, 8.3.20.1914)
            авторизация: Строка, // <логин кластер> <пароль кластер> <логин база> <пароль база>
            словаИсключенияДляБаз: Строка,//перечисляем через пробел базы для исключения или слова из названия баз (например, copy)
            путьКАрхиву: Строка) 
    знч подстрАвторизация = авторизация.Разделить(" ", Ложь)
    
    пер Сервер = новый АдминистрированиеСервераV8("localhost", 1545)
    пер СписокКластеров = Сервер.ПолучитьКластеры()

    знч исключаемыеБазы = словаИсключенияДляБаз.Разделить(" ", Ложь)

    знч loginClaster: Строка = подстрАвторизация[0] //<логин кластер>
    знч passwordClaster: Строка = подстрАвторизация[1] //<пароль кластер>
    знч loginBase: Строка = подстрАвторизация[2] //<логин база>
    знч passwordBase: Строка = подстрАвторизация[3] //<пароль база>

    знч описаниеСообщений = новый Массив<Соответствие<Строка, Объект?>>()
    // знч файлLogs = новый Файл(".\\logs\\logProcess1.json")
    // исп потокЗаписи = файлLogs.ОткрытьПотокЗаписи()
    // знч настройкаЗаписиОбъектовJson = новый НастройкиЗаписиОбъектовJson()
    // знч описаниеАрхивации = новый Соответствие<Строка, Объект?>()
    // описаниеАрхивации.Вставить("event_id",новый Ууид())
    // СериализацияJson.ЗаписатьОбъект(потокЗаписи, описаниеАрхивации, настройкаЗаписиОбъектовJson)
    для текКластер из СписокКластеров

        пер списокБаз = <Ууид, ОписаниеБазы>{:}

        Консоль.Записать("claster " + текКластер.Имя)
        попытка 
            текКластер.ВыполнитьАутентификацию(loginClaster, passwordClaster)
        поймать Исключение: неизвестно
            Консоль.Записать(Исключение)
            
            описаниеСообщений.Добавить({
                "type": "ошибка авторизации на класстере",
                "value": Исключение.ВСтроку(),
                "module": "кластер"
            })
            продолжить
        ;
        пер СписокОписанийИБ = текКластер.ПолучитьИнфобазы()
        для текОписаниеИБ из СписокОписанийИБ // блокировкаБазыДанных
            знч имяИБ = текОписаниеИБ.Имя
            пер базуНужноПропустить = Ложь
            для имяИсклБазы из исключаемыеБазы
                если имяИБ.Найти(имяИсклБазы) != -1
                    базуНужноПропустить = Истина
                    break
                ;
            ;
            если базуНужноПропустить
                продолжить
            ;
            Консоль.Записать("В базе ${текОписаниеИБ.Имя} заблок. регл. задания")
            знч текУИДИнфоБазы = текОписаниеИБ.ИдИнфобазы

            знч текОписИБ = текКластер.ПолучитьИнфобазу(текОписаниеИБ.ИдИнфобазы)
            пер текИБ: неизвестно
            попытка
                текИБ = текОписИБ.ВыполнитьАутентификацию(loginBase, passwordBase)
            поймать Исключение: неизвестно
                Консоль.Записать(Исключение)
                описаниеСообщений.Добавить({
                    "type": "ошибка авторизации в базе данных",
                    "value": Исключение,
                    "module": "блокировкаБазыДанных"
                })
                продолжить               
            ;
            ЗаблокироватьБазу(текИБ)

            //знч текИБ = текКластер.ПолучитьИнфобазу(текУИДИнфоБазы)
            списокБаз.Вставить(текУИДИнфоБазы, новый ОписаниеБазы(текОписаниеИБ.Имя, текИБ))
        ;

        знч сеансы = текКластер.ПолучитьСеансы()
        для сеанс из сеансы //завершение сеансов
            знч текОписИБ = текКластер.ПолучитьИнфобазу(сеанс.ИдИнфобазы)
            если не списокБаз.СодержитКлюч(сеанс.ИдИнфобазы)
                продолжить
            ;
            //знч текИБ = текОписИБ.ВыполнитьАутентификацию(loginBase, passwordBase)

            знч времяНачалаСеанса = сеанс.ВремяНачала.ВДатаВремя(новый ЧасовойПояс("UTC+3"))
            знч времяПослАктивности = сеанс.ВремяПоследнейАктивности.ВДатаВремя(новый ЧасовойПояс("UTC+3"))
            знч сообщение = "# ${сеанс.НомерСеанса} app - ${сеанс.ИмяПриложения} база - ${текОписИБ.Имя} user - ${сеанс.ИмяПользователя} время нач/посл. - ${времяНачалаСеанса}/${времяПослАктивности} sleep - ${сеанс.СпящийСеанс}"
            если сеанс.СпящийСеанс 
                или закрыватьАктивныеСеансы 
                или сеанс.ИмяПриложения == "BackgroundJob"
                или сеанс.ИмяПриложения == "SrvrConsole"
                или сеанс.ИмяПриложения == "RAS"
                попытка 
                    сеанс.ЗавершитьСеанс()
                    знч текстСообщения = "сеанс ЗАВЕРШЕН " + сообщение 
                    Консоль.Записать(текстСообщения)
                    описаниеСообщений.Добавить({
                        "type": "сеанс завершен успешно",
                        "value": текстСообщения,
                        "module": "завершениеСеансов"
                    })
                поймать Исключение: неизвестно
                    Консоль.Записать("ошибка закрытия сеанса " + Исключение.ToString() )
                    описаниеСообщений.Добавить({
                        "type": "Ошибка:сеанс завершен не успешно",
                        "value": Исключение,
                        "module": "завершениеСеансов"
                    })
                    продолжить
                    //выбросить Исключение
                ;
            иначе
                Консоль.Записать(сообщение)
                описаниеСообщений.Добавить({
                    "type": "Сообщение",
                    "value": сообщение,
                    "module": "завершениеСеансов"
                })
            ;
            //пер элСпискаБаз = списокБаз.Получить(сеанс.ИдИнфобазы)
            //элСпискаБаз.колАктПольз += 1
            //списокБаз.Вставить(сеанс.ИдИнфобазы, элСпискаБаз)


        ;
        для описание из списокБаз //архивацияБазы
            знч текИБ = описание.Value.база
            знч времяНачала = ДатаВремя.Now()
            знч сообщениеНачалаАрхивации = "${текИБ.Имя} - Начата архивация $времяНачала"
            Консоль.Записать(сообщениеНачалаАрхивации)
            описаниеСообщений.Добавить({
                "type": "Сообщение",
                "value": сообщениеНачалаАрхивации,
                "module": "архивацияБазы"
            })
            ЗапускАрхивации(номерВерсии, текИБ.Имя, loginBase, passwordBase, путьКАрхиву)
            попытка 
                текИБ.БлокировкаРегламентныхЗаданий = Ложь
                текИБ.ВключенаБлокировкаНачалаСеансов = Ложь
                текИБ.СообщениеБлокировки = ""
                текИБ.Write()
                знч сеансыТекБазы = текИБ.ПолучитьСеансы()
                для сеансТекБазы из сеансыТекБазы
                   сеансТекБазы.ЗавершитьСеанс() 
                ;
                знч времяОкончания = ДатаВремя.Now()
                знч длительностьАрхивации = времяОкончания - времяНачала
                знч сообщениеЗавершенияАрхивации = "${текИБ.Имя} - Конец архивации $времяОкончания (длилась: ${длительностьАрхивации.Presentation()})"
                Консоль.Записать(сообщениеЗавершенияАрхивации)
                описаниеСообщений.Добавить({
                    "type": "Сообщение",
                    "value": сообщениеЗавершенияАрхивации,
                    "module": "архивацияБазы"
                })
            поймать Исключение: неизвестно
                Консоль.Записать("Ошибка: ${Исключение}")
                описаниеСообщений.Добавить({
                    "type": "ошибка",
                    "value": Исключение,
                    "module": "архивацияБазы"
                })
            ;
        ;
    ;
    ЗаписьВJSON(номерВерсии, описаниеСообщений)
    ОтправитьВSentry()
;

метод Скрипт(закрыватьАктивныеСеансы: Булево,
            номерВерсии: Строка, // номер версии платформу (например, 8.3.20.1914)
            авторизация: Строка, // <логин кластер> <пароль кластер> <логин база> <пароль база>
            словаИсключенияДляБаз: Строка = "copy",//перечисляем через пробел базы для исключения или слова из названия баз (например, copy)
            путьКАрхиву: Строка,
            путьКУдаленномуАрхиву: Строка) 

    ОсновнойПроцессАрхивации(закрыватьАктивныеСеансы,
            номерВерсии, 
            авторизация, 
            словаИсключенияДляБаз,
            путьКАрхиву)

    КопироватьАрхивы(путьКАрхиву, путьКУдаленномуАрхиву)
;